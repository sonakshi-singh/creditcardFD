setwd("C:/Users/pc/Desktop/ANN/Regression")
?.csv
?read.csv
a<-read.csv("Auto.csv",header=TRUE,na.strings="?")
View(c)
View(a)
?lm
?lm
lreg=lm(a$mpg~a$horsepower)
summary(lreg)
a<-read.csv("Auto.csv",header=TRUE,na.strings="?")
View(a)
lreg=lm(a$mpg~a$horsepower)
summary(lreg)
a=na.omit(a)
lreg=lm(mpg~horsepower,data=a)
View(a)
summary(lreg)
plot(a$horsepower,a$mpg)
?abline
attributes(lreg)
abline(lreg,col="red")
ploit
par(mfrow=c(2,2))
plot(lreg)
summary(a$horsepower)
par(mfrow=c(1,1))
m2<-lm(mpg~horsepower+I(horsepwer^2),data=a)
m2<-lm(mpg~horsepower+I(horsepower^2),data=a)
summary(m2)
summary(lreg)
xrange <- seq(from=min(a$horsepower),to=max(a$horsepower))
lines(xrange, predict(m2,data.frame(horsepower=xrange)), col="red")
par(mfrow=c(1,1))
plot(m2)
par(mfrow=c(1,1))
lines(xrange, predict(m2,data.frame(horsepower=xrange)), col="red")
plot()
?plot
?plot(m2,type="n")
plot(m2,type="n")
plot(type="n")
plot(a$horsepower,a$mpg,type="n")
plot(a$horsepower,a$mpg)
lines(xrange, predict(m2,data.frame(horsepower=xrange)), col="red")
xrange
a$name=NULL
cor(a)
a$origin=as.factor(a$origin)
a$origin
m3<-lm(mpg~.,)
m3<-lm(mpg~.,a)
summary(a)
summary(a)
summary(m3)
plot(m3)
library("ISLR")
install.packages("ISLR")
install.packages("ISLR")
library("ISLR")
head(Default)
nrow(Default)
?sample
setwd("C:/Users/pc/Desktop/ANN/lec3session2")
spam<-read.csv("email_spam.csv",header=TRUE)
View(spam)
typeof(spam)
typeof(spam$num_char)
typeof(spam$password)
typeof(spam$to_multiple)
?glm
model<-glm(spam~to_multiple,data=spam,family = binomial)
?predict
summary(model)
plot(model)
plot(model)
typeof(spam$to_multiple)
as.factor(spam$spam)
as.factor(spam$to_multiple)
model<-glm(spam~to_multiple,data=spam,family = binomial)
plot(model)
summary(model)
plot(x=spam$spam,y=spam$to_multiple)
plot(model)
?glm.fit
?glm.probs
predicted<-predict(model,spam$to_multiple,type="resp")
predicted<-predict(model,spam$to_multiple,type="resp")
predicted<-predict(model,as.numeric(spam$to_multiple),type="resp")
predicted<-predict(model,d=as.numeric(spam$to_multiple),type="resp")
predicted
model<-glm(spam~to_multiple,data=spam,family = binomial)
predicted<-predict(model,d=spam$to_multiple,type="resp")
predicted
curve(predicted)
curve(predicted)
plot(predicted)
plot(spam)
plot(spam$spam)
plot(x=spam$spam,y=spam$to_multiple)
boxplot(spam$spam~spam$to_multiple)
spam$X=NULL
model<-glm(spam~to_multiple,data=spam,family = binomial)
summary(model)
predict(model, data.frame(to_multiple=as.factor("yes")), type="response")
exp(-2.11609-1.80918)/(1+exp(-2.11609-1.80918))
exp(-2.11609)/(1+exp(-2.11609))
predict(model, data.frame(to_multiple=as.factor("no")), type="response")
as.factor(spam$format)
as.factor(spam$number)
model2<-glm(spam~.,data=spam,family = binomial)
summary(model2)
as.character(spam$spam)
model<-glm(spam~to_multiple,data=spam,family = binomial)
summary(model)
as.numeric(spam$spam)
install.packages("boot")
install.packages("foreign")
?Foreign
?Foreign
?foreign
setwd("C:/Users/pc/Desktop/ANN/lec4")
spam=read.csv("email_spam.csv",header=TRUE,na.strings = "?")
na.omit(spam)
write.arff(spam,"s",eol="\n", relation = deparse(substitute(spam))
write.arff(spam,"s",eol="\n")
library(foreign)
write.arff(spam,"s",eol="\n", relation = deparse(substitute(spam))
write.arff(spam,"s",eol="\n")
?read.arff
read.arff(s)
read.arff("s")
typeof(spam$spam)
?as.factor
as.factor(spam$spam)
as.factor(spam$spam,levels=c("no,"yes"))
as.factor(spam$spam,levels=c("0,"1"))
spam$spam[spam$spam==1]<-"yes"
spam$spam[spam$spam==0]<-"no"
spam$spam
as.factor(spam$spam)
write.arff(spam,"spamfile",eol="\n")
read.arff(spamfile)
read.arff("spamfile")
s<-read.arff("spamfile")
View(s)
write.arff(spam,"spamfile.arff",eol="\n")
?rm
spam$X=NULL
write.arff(spam,"email_spam.arff",eol="\n")
typeof(spam$spam)
spam$spam
as.factor(spam$spam)
write.arff(spam,"email_spam.arff",eol="\n")
spam$spam
is.factor(spam$spam)
spam$spam<-as.factor(spam$spam)
write.arff(spam,"email_spam.arff",eol="\n")
?data.frame
cancer=data.frame("breast-cancer-wisconsin.data.txt")
View(cancer)
cancer=read.table("breast-cancer-wisconsin.data.txt")
?read.table
cancer=read.table("breast-cancer-wisconsin.data.txt",sep=",",na.strings="?",col.names=c("Samplecodenumber","ClumpThickness","UniformityofCellSize","UniformityofCellShape","MarginalAdhesion","SingleEpithelialCellSize","BareNuclei","BlandChromatin","NormalNucleoli","Mitoses","class"))
cancer=read.table("breast-cancer-wisconsin.data.txt",sep=",",na.strings="?",col.names=c("Samplecodenumber","ClumpThickness","UniformityofCellSize","UniformityofCellShape","MarginalAdhesion","SingleEpithelialCellSize","BareNuclei","BlandChromatin","NormalNucleoli","Mitoses","class"),header=FALSE)
typeof(cancer)
cancer<-na.omit(cancer)
ncol(cancer)
nrow(cancer)
cancercluster<-cancer[-1]
View(cancercluster)
cancercluster<-cancercluster[-10]
View(cancercluster)
kmeanresult<-kmeans(cancercluster,2,nstart=20)
kmeanresult
pairs(cancercluster, col=c("red", "green3", "blue")[kmeanresult$cluster], pch=c(21,22,24)[kmeanresult$cluster])
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
pairs(cancercluster, col=c("red","blue")[cancer$class], pch=c(21,24)[kmeanresult$cluster])
pairs(cancercluster, col=c("red","blue")[cancer$class], pch=c(21,24)[cancer$class])
cancer$class<-as.factor(cancer$class)
pairs(cancercluster, col=c("red","blue")[cancer$class], pch=c(21,24)[cancer$class])
cancer$class
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
kmeanresult$cluster
?setdiff
length(levels(cancer$class))
length(levels(kmeanresult$cluster))
kmeanresult$cluster<-as.factor(kmeanresult$cluster)
length(levels(kmeanresult$cluster))
kmeanresult$cluster
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
?par
par
par(mfrow=c(2,2))
pairs(cancercluster, col=c("red","blue")[cancer$class], pch=c(21,24)[cancer$class])
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
sum(cancer$class==2 &&kmeanresult$cluster==2)
sum(cancer$class==2 & kmeanresult$cluster==2)
sum(cancer$class==4 & kmeanresult$cluster==1)
sum(cancer$class==1)
sum(cancer$class==2)
sum(cancer$class==4)
sum(kmeanresult$cluster==1)
sum(kmeanresult$cluster==4)
sum(kmeanresult$cluster==2)
missclassified2=sum(cancer$class==2 & kmeanresult$cluster==2)-sum(cancer$class==2)
missclassified2
missclassified2=sum(cancer$class==2)-sum(cancer$class==2 & kmeanresult$cluster==2)
missclassified2
missclassified4=sum(cancer$class==4)-sum(cancer$class==4 & kmeanresult$cluster==1)
missclassified4
missclassified2=sum(cancer$class==2 & kmeanresult$cluster!=2)
missclassified2
missclassified4=sum(cancer$class==4 & kmeanresult$cluster!=1)
missclassified4
kmeanresult2<-kmeans(cancercluster,2,nstart=25)
set.seed(20)
kmeanresult2<-kmeans(cancercluster,2,nstart=25)
pairs(cancercluster, col=c("red","blue")[kmeanresult2$cluster], pch=c(21,24)[kmeanresult2$cluster])
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
kmeanresult2$cluster<-as.factor(kmeanresult2$cluster)
pairs(cancercluster, col=c("red","blue")[kmeanresult2$cluster], pch=c(21,24)[kmeanresult2$cluster])
pairs(cancercluster, col=c("red","blue")[kmeanresult$cluster], pch=c(21,24)[kmeanresult$cluster])
kmeanresult2$cluster
kmeanresult$cluster
miss2classified4=sum(cancer$class==4 & kmeanresult$cluster!=2)
miss2classified2=sum(cancer$class==2 & kmeanresult$cluster!=1)
miss2classified2
miss2classified2=sum(cancer$class==2 & kmeanresult2$cluster!=1)
miss2classified4=sum(cancer$class==4 & kmeanresult2$cluster!=2)
miss2classified2
miss2classified4
TP24=sum(cancer$class==4 & kmeanresult2$cluster==2)
TN22=sum(cancer$class==2 & kmeanresult2$cluster==1)
TN22
TP24
accuracy=(TP24+TN22)/nrow(kmeanresult2)
accuracy
accuracy=(TP24+TN22)/nrow(kmeanresult2$cluster)
accuracy
nrow(kmeanresult2$cluster)
nrow(kmeanresult2)
View(kmeanresult2)
View(kmeanresult2)
accuracy=(TP24+TN22)/nrow(cancer)
accuracy
nrow(cancer)
(TP24+TN22)
hc.complete = hclust(dist(cancercluster), method="complete")
plot(hc.complete, main="Complete Linkage", xlab="", sub="")
plot(hc.complete, main="Complete Linkage", xlab="", sub="")
par(mfrow=c(1,1))
plot(hc.complete, main="Complete Linkage", xlab="", sub="")
cluster.complete = cutree(hc.complete, 2)
cluster.complete
pairs(cancercluster, col=c("red","blue")[cluster.complete], pch=c(21,24)[cluster.complete])
setwd("C:/Users/pc/Desktop/creditcardfraud")
source("project.R")
dataset=read.csv("creditcard.csv",header=TRUE)
View(dataset)
summary(dataset)
cov(dataset)
summ=summary(dataset)
write.csv(summ,"summ.csv")
covar=cov(dataset)
write.csv(covar,"covar.csv")
corr=cor(dataset)
write.csv(corr,"corr.csv")
barplot(dataset$Class)
barplot(dataset$Class)
datset$clss
datset$class
dataset$class
View(dataset)
barplot(dataset$Class)
dataset$Class
?BARPLOT
?barplot
plot(dataset$Class)
barplot(dataset$Class,
main = "fraud not fraud count",
names.arg = c(0,1))
barplot(dataset$Class,main = "fraud and not-fraud count",names.arg = c(0,1))
barplot(dataset$Class,main = "fraud and not-fraud count",names.arg = c(0,1))
barplot(dataset$Class,main = "fraud and not-fraud count")
hist(dataset$Class)
?hist
hist(dataset$Class,xlim=300000)
hist(dataset$Class,xlim=c(0,300000))
hist(dataset$Class,ylim=c(0,300000))
hist(dataset$Class)
hist(dataset$Class,ylim=c(0,300000))
plot(dataset$Time,dataset$V1)
plot(dataset$Time,dataset$V2)
plot(dataset$Time,dataset$V3)
datset$V1
dataset$V1
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$V3)
plot(dataset$Time,dataset$Amount)
plot(dataset$Time,dataset$Amount,col=c("red","blue")[dataset$Class])
dataset$Class=as.factor(dataset$Class)
plot(dataset$Time,dataset$Amount,col=c("red","blue")[dataset$Class])
install.packages("DMwR")
library(DMwR)
?SMOTE
print(table(dataset$Class))
print(prop.table(table(dataset$Class))
print(prop.table(table(dataset$Class)))
print(prop.table(table(dataset$Class))*100)
head(dataset,3)
print(prop.table(table(dataset$Class))*100)
install.packages("caret")
library(caret)
?createDataPartition
splitindex<-createDataPartition(dataset$Class,p=0.50,list=FALSE,times=1)
splitindex
trainsplit=dataset[splitindex,]
testsplit=dataset[-splitindex,]
trainsplit=dataset[splitindex,]
testsplit
nrow(trainsplit)
nrow(testsplit)
prop.table(table(trainsplit))
prop.table(table(trainsplit$Class))
dataset$Class
sampdata=SMOTE(Class~.,dataset,perc.over=200,perc.under=600)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=300,perc.under=800)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=200,perc.under=700)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=400,perc.under=600)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=400,perc.under=100)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=100,perc.under=200)
print(prop.table(table(sampdata$Class))*100)
sampdatashuffle=sampdata[sample(nrow(sampdata)),]
library(caret)
set.seed(1234)
splitindex<-createDataPartition(sampdatashuffle$Class,p=0.70,list=FALSE,times=1)
trainsplit=sampledatashuffle[splitindex,]
testsplit=sampledatashuffle[-splitindex,]
library(caret)
set.seed(1234)
splitindex<-createDataPartition(sampdatashuffle$Class,p=0.70,list=FALSE,times=1)
trainsplit=sampdatashuffle[splitindex,]
testsplit=sampdatashuffle[-splitindex,]
print(prop.table(table(trainsplit$Class))*100)
nrow(trainsplit)
nrow(testsplit)
nrow(sampdatashuffle)
sampdata=SMOTE(Class~.,dataset,perc.over=200,perc.under=400)
print(prop.table(table(sampdata$Class))*100
print(prop.table(table(sampdata$Class))*100
print(prop.table(table(sampdata$Class))*100)
print(prop.table(table(sampdata$Class))*100)
sampdata=SMOTE(Class~.,dataset,perc.over=100,perc.under=200)
print(prop.table(table(sampdata$Class))*100
sampdata=SMOTE(Class~.,dataset,perc.over=100,perc.under=200)
print(prop.table(table(sampdata$Class))*100)
install.packages("e1071")
library(caret)
set.seed(1234)
splitindex<-createDataPartition(dataset$Class,p=0.70,list=FALSE,times=1)
trainsplit=dataset[splitindex,]
testsplit=dataset[-splitindex,]
print(prop.table(table(trainsplit$Class))*100)
print(prop.table(table(testsplit$Class))*100)
print(prop.table(table(dataset$Class))*100)
print(table(testsplit$Class))
print(table(trainsplit$Class))
sampdatatrain=SMOTE(Class~.,trainsplit,perc.over=100,perc.under=200)
print(prop.table(table(sampdatatrain$Class))*100)
sampdatashuffletrain=sampdatatrain[sample(nrow(sampdatatrain)),]
print(table(sampdatashuffletrain$Class))
library(e1071)
?svm
svmalgo=svm(Class~.,data=trainsplit)
presvm=predict(svmalgo,testsplit[,1:30])
attributes(presvm)
presvm
confusionMatrix(presvm,testsplit$Class)
confusionMatrix(presvm,testsplit$Class)
nrow(presvm)
presvm
length(presvm)
hist(dataset$Class,ylim=c(0,300000))
hist(as.numeric(dataset$Class),ylim=c(0,300000))
print(prop.table(table(dataset$Class))*100)
print(table(dataset$Class)*100)
85285+102
(85285+102)/85441
print(table(dataset$Class)*100)
dataset=read.csv("creditcard.csv",header=TRUE)
dataset$Class=as.factor(dataset$Class)
print(table(dataset$Class))
print(prop.table(table(dataset$Class))*100)
library(caret)
set.seed(1000)
splitindex<-createDataPartition(dataset$Class,p=0.70,list=FALSE,times=1)
trainsplit=dataset[splitindex,]
testsplit=dataset[-splitindex,]
print(prop.table(table(trainsplit$Class))*100)
print(prop.table(table(testsplit$Class))*100)
print(table(trainsplit$Class))
print(table(testsplit$Class))
sampdatatrain=SMOTE(Class~.,trainsplit,perc.over=100,perc.under=200)
print(prop.table(table(sampdatatrain$Class))*100)
sampdatashuffletrain=sampdatatrain[sample(nrow(sampdatatrain)),]
svmalgo=svm(Class~.,data=trainsplit)
presvm=predict(svmalgo,testsplit[,1:30])
svmalgo
attributes(svmalgo)
svmalgo$class
svmalgo.formula
svmalgo.nclasses
svmalgo$nclasses
svmalgo$fitted
confusionMatrix(presvm,testsplit$Class)
confusionMatrix(svmalgo$fitted,trainsplit$Class)
cmtest<-confusionMatrix(presvm,testsplit$Class)
attributes(cmtest)
fourfoldplot(cmtest)
fourfoldplot(cmtest$table)
plot(cmtest)
cmtest<-confusion(presvm,testsplit$Class)
install.packages("mlearning")
library(mlearning)
cmtest<-confusion(presvm,testsplit$Class)
plot(cmtest)
print(cmtest, sums = FALSE, sort = FALSE)
summary(cmtest)
plot(cmtest, sort = FALSE) # No sorting
plot(cmtest, type = "stars")
plot(cmtest, type = "barplot")
plot(cmtest, type = "barplot")
plot(cmtest, type = "dendrogram")
plot(cmtest, type = "dendrogram")
cmtest<-confusionMatrix(presvm,testsplit$Class)
attributes(cmtest)
plot(cmtest$table)
cmtest<-confusion(presvm,testsplit$Class)
cmtest<-confusion(presvm,testsplit$Class)
plot(cmtest$table)
plot(cmtest$table)
attributes(cmtest)
plot(cmtest)
confusionMatrix(svmalgo$fitted,trainsplit$Class)
confusionMatrix(presvm,testsplit$Class)
tunedpara<- tune.svm(Class~., data = trainsplit, gamma = 10^(-5:-1), cost = 10^(-3:1))
tunepara
save.image("C:/Users/pc/Desktop/creditcardfraud/savedata.RData")
savehistory("C:/Users/pc/Desktop/creditcardfraud/savehistory.Rhistory")
